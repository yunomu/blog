AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31
Description: blog console

Parameters:
  SiteDomainName:
    Type: String
  Certificate:
    Type: String
  UserPoolId:
    Type: String
  CallbackURL:
    Type: String
  LogoutURL:
    Type: String
  UserNameIndex:
    Type: String
    Default: NameIndex
  FileUserIndex:
    Type: String
    Default: UserIndex
  CloudFrontManagedCachePolicy:
    Type: String
    Default: "658327ea-f89d-4fab-a63d-7e88639e58f6"
  ConsoleDomainName:
    Type: String

Globals:
  Function:
    Runtime: provided.al2023
    Handler: bootstrap
    Architectures:
      - x86_64

Resources:
  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref UserPoolId
      SupportedIdentityProviders:
        - COGNITO
      GenerateSecret: false
      CallbackURLs:
        - !Ref CallbackURL
      LogoutURLs:
        - !Ref LogoutURL
      AllowedOAuthFlowsUserPoolClient: true
      AllowedOAuthFlows:
        - code
      AllowedOAuthScopes:
        - email
        - openid
      ExplicitAuthFlows:
        - ALLOW_USER_PASSWORD_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH
      IdTokenValidity: 1
      AccessTokenValidity: 1
      RefreshTokenValidity: 30
      TokenValidityUnits:
        IdToken: "hours"
        AccessToken: "hours"
        RefreshToken: "days"

  UserTable:
    Type: AWS::DynamoDB::Table
    Properties:
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: Id
          AttributeType: S
        - AttributeName: Attr
          AttributeType: S
        - AttributeName: Name
          AttributeType: S
      KeySchema:
        - AttributeName: Id
          KeyType: HASH
        - AttributeName: Attr
          KeyType: RANGE
      GlobalSecondaryIndexes:
        - IndexName: !Ref UserNameIndex
          KeySchema:
            - AttributeName: Name
              KeyType: HASH
          Projection:
            ProjectionType: KEYS_ONLY
      StreamSpecification:
        StreamViewType: NEW_IMAGE

  FileTable:
    Type: AWS::DynamoDB::Table
    Properties:
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: Key
          AttributeType: S
        - AttributeName: Attr
          AttributeType: S
        - AttributeName: UserIdx
          AttributeType: S
        - AttributeName: TS
          AttributeType: N
      KeySchema:
        - AttributeName: Key
          KeyType: HASH
        - AttributeName: Attr
          KeyType: RANGE
      GlobalSecondaryIndexes:
        - IndexName: !Ref FileUserIndex
          KeySchema:
            - AttributeName: UserIdx
              KeyType: HASH
            - AttributeName: TS
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
      StreamSpecification:
        StreamViewType: NEW_IMAGE

  PublishBucket:
    Type: AWS::S3::Bucket
    Properties:
      PublicAccessBlockConfiguration:
        BlockPublicPolicy: false

  PublishBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref PublishBucket
      PolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: cloudfront.amazonaws.com
            Action: s3:GetObject
            Resource: !Sub "arn:aws:s3:::${PublishBucket}/*"
            Condition:
              StringEquals:
                AWS:SourceArn: !Sub "arn:aws:cloudfront::${AWS::AccountId}:distribution/${Distribution}"

  UserTableReadPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - dynamodb:GetItem
              - dynamodb:Query
            Resource:
              - !GetAtt UserTable.Arn
              - !Sub
                - "${TableArn}/index/*"
                - TableArn: !GetAtt UserTable.Arn

  UserTableWritePolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - dynamodb:PutItem
            Resource:
              - !GetAtt UserTable.Arn
              - !Sub
                - "${TableArn}/index/*"
                - TableArn: !GetAtt UserTable.Arn

  FileTableReadPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - dynamodb:GetItem
              - dynamodb:Query
            Resource:
              - !GetAtt FileTable.Arn
              - !Sub
                - "${TableArn}/index/*"
                - TableArn: !GetAtt FileTable.Arn

  FileTableWritePolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - dynamodb:PutItem
              - dynamodb:UpdateItem
            Resource:
              - !GetAtt FileTable.Arn
              - !Sub
                - "${TableArn}/index/*"
                - TableArn: !GetAtt FileTable.Arn

  FileTableDeletePolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - dynamodb:DeleteItem
            Resource:
              - !GetAtt FileTable.Arn
              - !Sub
                - "${TableArn}/index/*"
                - TableArn: !GetAtt FileTable.Arn

  PublishBucketPutPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - s3:PutObject
            Resource:
              - !Sub
                - "${BucketArn}/*"
                - BucketArn: !GetAtt PublishBucket.Arn

  PublishBucketGetPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - s3:GetObject
            Resource:
              - !Sub
                - "${BucketArn}/*"
                - BucketArn: !GetAtt PublishBucket.Arn

  PublishBucketDeletePolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - s3:DeleteObject
            Resource:
              - !Sub
                - "${BucketArn}/*"
                - BucketArn: !GetAtt PublishBucket.Arn

  Api:
    Type: AWS::Serverless::HttpApi
    Properties:
      StageName: prod
      CorsConfiguration:
        AllowHeaders:
          - Content-Type
          - Authorization
        AllowMethods:
          - POST
          - GET
          - PUT
          - DELETE
          - OPTIONS
        AllowOrigins:
          - '*'
      Auth:
        Authorizers:
          OAuth2Authorizer:
            IdentitySource: '$request.header.Authorization'
            JwtConfiguration:
              audience:
                - !Ref UserPoolClient
              issuer: !Sub "https://cognito-idp.${AWS::Region}.amazonaws.com/${UserPoolId}"
        DefaultAuthorizer: OAuth2Authorizer

  CloudFrontOriginAccessControl:
    Type: AWS::CloudFront::OriginAccessControl
    Properties:
      OriginAccessControlConfig:
        Name: !Ref AWS::StackName
        OriginAccessControlOriginType: s3
        SigningBehavior: always
        SigningProtocol: sigv4

  Distribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Enabled: true
        DefaultRootObject: index.html
        ViewerCertificate:
          AcmCertificateArn: !Ref Certificate
          MinimumProtocolVersion: TLSv1.2_2021
          SslSupportMethod: sni-only
        DefaultCacheBehavior:
          CachePolicyId: !Ref CloudFrontManagedCachePolicy
          TargetOriginId: !Sub "s3-${PublishBucket}"
          ViewerProtocolPolicy: https-only
          AllowedMethods:
            - GET
            - HEAD
        Origins:
          - Id: !Sub "s3-${PublishBucket}"
            DomainName: !GetAtt PublishBucket.RegionalDomainName
            OriginAccessControlId: !GetAtt CloudFrontOriginAccessControl.Id
            S3OriginConfig: {}

  ConsoleBucket:
    Type: AWS::S3::Bucket
    Properties:
      PublicAccessBlockConfiguration:
        BlockPublicPolicy: false

  ConsoleBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref ConsoleBucket
      PolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: cloudfront.amazonaws.com
            Action: s3:GetObject
            Resource: !Sub "arn:aws:s3:::${ConsoleBucket}/*"
            Condition:
              StringEquals:
                AWS:SourceArn: !Sub "arn:aws:cloudfront::${AWS::AccountId}:distribution/${ConsoleDistribution}"

  ConsoleCloudFrontOriginAccessControl:
    Type: AWS::CloudFront::OriginAccessControl
    Properties:
      OriginAccessControlConfig:
        Name: !Sub "${AWS::StackName}-console"
        OriginAccessControlOriginType: s3
        SigningBehavior: always
        SigningProtocol: sigv4

  CloudFrontApiCachePolicy:
    Type: AWS::CloudFront::CachePolicy
    Properties:
      CachePolicyConfig:
        Name: !Sub "${AWS::StackName}-AuthApiCachePolicy"
        DefaultTTL: 3600
        MaxTTL: 3600
        MinTTL: 1
        ParametersInCacheKeyAndForwardedToOrigin:
          CookiesConfig:
            CookieBehavior: none
          HeadersConfig:
            HeaderBehavior: whitelist
            Headers:
              - Authorization
          QueryStringsConfig:
            QueryStringBehavior: all
          EnableAcceptEncodingBrotli: True
          EnableAcceptEncodingGzip: True

  ConsoleDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Enabled: true
        DefaultRootObject: index.html
        Aliases:
          - !Ref ConsoleDomainName
        ViewerCertificate:
          AcmCertificateArn: !Ref Certificate
          MinimumProtocolVersion: TLSv1.2_2021
          SslSupportMethod: sni-only
        CacheBehaviors:
          - TargetOriginId: !Sub "api-${Api}"
            CachePolicyId: !Ref CloudFrontApiCachePolicy
            PathPattern: /v1/*
            ViewerProtocolPolicy: https-only
            AllowedMethods:
              - GET
              - HEAD
              - DELETE
              - OPTIONS
              - PATCH
              - POST
              - PUT
        DefaultCacheBehavior:
          CachePolicyId: !Ref CloudFrontManagedCachePolicy
          TargetOriginId: !Sub "s3-${ConsoleBucket}"
          ViewerProtocolPolicy: https-only
          AllowedMethods:
            - GET
            - HEAD
        CustomErrorResponses:
          - ErrorCode: 403
            ResponseCode: 200
            ResponsePagePath: /index.html
        Origins:
          - Id: !Sub "s3-${ConsoleBucket}"
            DomainName: !GetAtt ConsoleBucket.RegionalDomainName
            OriginAccessControlId: !GetAtt ConsoleCloudFrontOriginAccessControl.Id
            S3OriginConfig: {}
          - Id: !Sub "api-${Api}"
            DomainName: !Sub "${Api}.execute-api.${AWS::Region}.amazonaws.com"
            OriginPath: !Sub "/${ApiprodStage}"
            CustomOriginConfig:
              HTTPSPort: 443
              OriginProtocolPolicy: https-only
              OriginSSLProtocols:
                - TLSv1.2
              OriginReadTimeout: 30
              OriginKeepaliveTimeout: 5

  UserFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: go1.x
    Properties:
      CodeUri: api/user/
      Policies:
        - !Ref UserTableReadPolicy
        - !Ref UserTableWritePolicy
      Environment:
        Variables:
          REGION: !Ref AWS::Region
          USER_TABLE: !Ref UserTable
          USER_NAME_INDEX: !Ref UserNameIndex
      Events:
        Create:
          Type: HttpApi
          Properties:
            ApiId: !Ref Api
            Method: POST
            Path: /v1/user
        Get:
          Type: HttpApi
          Properties:
            ApiId: !Ref Api
            Method: GET
            Path: /v1/user

  FileFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: go1.x
    Properties:
      CodeUri: api/file/
      Policies:
        - !Ref UserTableReadPolicy
        - !Ref FileTableReadPolicy
        - !Ref FileTableWritePolicy
        - !Ref PublishBucketPutPolicy
      Environment:
        Variables:
          REGION: !Ref AWS::Region
          USER_TABLE: !Ref UserTable
          USER_NAME_INDEX: !Ref UserNameIndex
          FILE_TABLE: !Ref FileTable
          FILE_USER_INDEX: !Ref FileUserIndex
      Events:
        Upload:
          Type: HttpApi
          Properties:
            ApiId: !Ref Api
            Method: POST
            Path: /v1/file
        List:
          Type: HttpApi
          Properties:
            ApiId: !Ref Api
            Method: GET
            Path: /v1/file
        Get:
          Type: HttpApi
          Properties:
            ApiId: !Ref Api
            Method: GET
            Path: /v1/file/{key}
        Delete:
          Type: HttpApi
          Properties:
            ApiId: !Ref Api
            Method: DELETE
            Path: /v1/file/{key}

  ImageFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: go1.x
    Properties:
      CodeUri: lambda/image/
      Policies:
        - !Ref PublishBucketPutPolicy
        - !Ref PublishBucketGetPolicy
        - !Ref PublishBucketDeletePolicy
        - !Ref FileTableReadPolicy
        - !Ref FileTableWritePolicy
        - !Ref FileTableDeletePolicy
      Environment:
        Variables:
          REGION: !Ref AWS::Region
          FILE_TABLE: !Ref FileTable
          FILE_USER_INDEX: !Ref FileUserIndex
          DISTRIBUTION: !Ref Distribution
      Events:
        DBStream:
          Type: DynamoDB
          Properties:
            Stream: !GetAtt FileTable.StreamArn
            StartingPosition: LATEST
            FilterCriteria:
              Filters:
                - Pattern: '{"eventName":["UPDATE"],"dynamodb":{"Keys":{"Attr":{"S":["orig"]}}}}'

Outputs:
  UserPoolClientId:
    Value: !Ref UserPoolClient
  PublishBucket:
    Value: !Ref PublishBucket
  DistributionDomainName:
    Value: !GetAtt Distribution.DomainName
  Distribution:
    Value: !Ref Distribution
  ConsoleBucket:
    Value: !Ref ConsoleBucket
  ConsoleDistributionDomainName:
    Value: !GetAtt ConsoleDistribution.DomainName
  ConsoleDistribution:
    Value: !Ref ConsoleDistribution
